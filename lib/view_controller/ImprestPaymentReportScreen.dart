import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:swington_managment/constants/constants.dart';

class ImprestPaymentReportScreen extends StatefulWidget {
  final String userId;
  final String apiToken;

  const ImprestPaymentReportScreen({
    Key? key,
    required this.userId,
    required this.apiToken,
  }) : super(key: key);

  @override
  State<ImprestPaymentReportScreen> createState() =>
      _ImprestPaymentReportScreenState();
}

class _ImprestPaymentReportScreenState
    extends State<ImprestPaymentReportScreen> {
  List<dynamic> reportData = [];
  List<dynamic> imprestPayment = [];
  int? totalBalance;
  int? remainingBalance;
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchReport();
  }

  Future<void> fetchReport() async {
    try {
      var request = http.MultipartRequest(
        'POST',
        Uri.parse('${constants.BASE_URL}imperest-payment-report'),
      );
      request.fields['user_id'] = widget.userId;
      request.fields['apiToken'] = widget.apiToken;

      var response = await request.send();
      var responseData = await http.Response.fromStream(response);

      if (responseData.statusCode == 200) {
        var jsonBody = json.decode(responseData.body);

        setState(() {
          reportData = jsonBody['reportData'] ?? [];
          imprestPayment = jsonBody['imprest_payment'] ?? [];
          totalBalance = jsonBody['total_balance'];
          remainingBalance = jsonBody['remaining_blanace'];
          isLoading = false;
        });
      } else {
        setState(() => isLoading = false);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Failed to load report")),
        );
      }
    } catch (e) {
      setState(() => isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error: $e")),
      );
    }
  }

  Widget buildBalanceSection() {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.all(12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.brown[100],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Total Balance: ₹${totalBalance ?? 0}",
            style: const TextStyle(
              color: Colors.black,
              fontWeight: FontWeight.bold,
              fontSize: 20,
            ),
          ),
          const SizedBox(height: 6),
          Text(
            "Remaining Balance: ₹${remainingBalance ?? 0}",
            style: const TextStyle(
              color: Colors.black,

              fontWeight: FontWeight.bold,
              fontSize: 20,
            ),
          ),
        ],
      ),
    );
  }

  Widget buildReportDataList() {
    if (reportData.isEmpty) {
      return const Center(child: Text("No report data found"));
    }

    return ListView.builder(
      padding: const EdgeInsets.all(12),
      itemCount: reportData.length,
      itemBuilder: (context, index) {
        var item = reportData[index];
        return Card(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          elevation: 2,
          margin: const EdgeInsets.symmetric(vertical: 8),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "Date: ${item['bill_date'] ?? ''}",
                  style: const TextStyle(
                      fontWeight: FontWeight.bold, fontSize: 16),
                ),
                const SizedBox(height: 6),
                Text("Head: ${item['head'] ?? ''}"),
                const SizedBox(height: 6),
                Text("Amount: ₹${item['amount'] ?? 0}"),
                if (widget.userId == "1") ...[
                  const SizedBox(height: 6),
                  Text("Generated By: ${item['bill_generate_by'] ?? ''}"),
                ],
              ],
            ),
          ),
        );
      },
    );
  }

  Widget buildImprestPaymentList() {
    if (imprestPayment.isEmpty) {
      return const Center(child: Text("No imprest payment data found"));
    }

    return // ✅ Imprest Payment Tab
      ListView.builder(
        padding: const EdgeInsets.all(12),
        itemCount: imprestPayment.length,
        itemBuilder: (context, index) {
          var item = imprestPayment[index];
          return Card(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            elevation: 2,
            margin: const EdgeInsets.symmetric(vertical: 8),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // ✅ Show Bill Date
                  Text(
                    "Date: ${item['date'] ?? ''}",
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 6),

                  // ✅ Show Received From instead of Head
                  Text("Received From: ${item['received_from'] ?? ''}"),
                  const SizedBox(height: 6),


                  // ✅ Show Pay To only if userId == 1
                  if (widget.userId == "1") ...[
                    Text("Pay To: ${item['pay_to'] ?? ''}"),
                  ],
                  const SizedBox(height: 6),

                  // ✅ Show Amount
                  Text("Amount: ₹${item['amount'] ?? 0}"),
                  const SizedBox(height: 6),

// ✅ Payment Status with colors
                  if (item['payment_status'] != null) ...[
                    Text(
                      "Payment Status : ${item['payment_status']}",
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: item['payment_status'].toString().toLowerCase() == "received"
                            ? Colors.green
                            : Colors.red,
                      ),
                    ),
                    const SizedBox(height: 6),
                  ],

                ],
              ),
            ),
          );
        },
      );
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: const Color(0xFFD2B48C),
          title: const Text("Head Imprest Report"),
          centerTitle: true,
          bottom: const TabBar(
            indicatorColor: Colors.white,
            tabs: [
              Tab(text: "Report Data"),
              Tab(text: "Imprest Payment"),
            ],
          ),
        ),
        body: isLoading
            ? const Center(child: CircularProgressIndicator())
            : Column(
          children: [
            buildBalanceSection(),
            Expanded(
              child: TabBarView(
                children: [
                  buildReportDataList(),
                  buildImprestPaymentList(),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
